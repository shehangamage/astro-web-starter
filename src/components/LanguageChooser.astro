---
import { Check, ChevronDown, Globe } from 'lucide-astro';

const supportedLangs = ['en', 'de'];

// Get the current URL from Astro
const { pathname } = Astro.url;
let currentLang = 'en';

// Detect current language from the first path segment
const parts = pathname.split('/').filter(Boolean);
if (parts.length > 0 && supportedLangs.includes(parts[0])) {
  currentLang = parts[0];
}

// Derive the current path without the language prefix
// For example: /en/pricing â†’ /pricing
const currentPath = pathname.replace(`/${currentLang}`, '');

// Construct options for each language
const options = [
  { label: 'EN', value: 'en', href: `/en${currentPath}` },
  { label: 'DE', value: 'de', href: `/de${currentPath}` },
];

export interface Props {
  id: string;
  classNames?: string;
}

const { id, classNames = '' } = Astro.props;
---

<style>
  /* Optional: add transitions or styling here if needed */
</style>

<div class={`relative inline-block text-primary-3 ${classNames}`} data-id={id}>
  <!-- Button to toggle dropdown -->
  <div>
    <button
      type="button"
      class="inline-flex w-full justify-center rounded-md bg-transparent px-2 py-1 text-sm font-semibold hover:text-white group"
      id={`${id}-button`}
      aria-expanded="true"
      aria-haspopup="true"
    >
      <Globe class="text-blue-500 group-hover:text-blue-900" />
      <ChevronDown class="text-blue-500 group-hover:text-blue-900" />
    </button>
  </div>

  <div
    id={`${id}-menu`}
    class="hidden absolute right-0 z-10 mt-2 w-[100px] origin-top-right rounded-md bg-blue-500 border border-primary-5 shadow-lg ring-1 ring-black/5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {
        options.map((option) => (
          <a
            href={option.href}
            class="flex flex-row px-4 py-2 text-sm text-white hover:bg-primary-6"
            role="menuitem"
          >
            <Check
              class={`${
                option.value === currentLang ? 'text-primary-3' : 'text-transparent'
              } w-4 h-4 mr-2`}
            />
            {option.label}
          </a>
        ))
      }
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const dropdowns = document.querySelectorAll('[data-id]');
      dropdowns.forEach((dropdown) => {
        const id = dropdown.getAttribute('data-id');
        const button = document.getElementById(`${id}-button`) as HTMLButtonElement;
        const menu = document.getElementById(`${id}-menu`) as HTMLDivElement;
        let open = false;

        if (button && menu) {
          button.addEventListener('click', () => {
            open = !open;
            button.setAttribute('aria-expanded', open.toString());
            menu.classList.toggle('hidden', !open);
          });

          // Close the menu when clicking outside
          document.addEventListener('click', (e) => {
            if (!button.contains(e.target as Node) && !menu.contains(e.target as Node)) {
              open = false;
              button.setAttribute('aria-expanded', 'false');
              menu.classList.add('hidden');
            }
          });
        }
      });
    });
  </script>
</div>
